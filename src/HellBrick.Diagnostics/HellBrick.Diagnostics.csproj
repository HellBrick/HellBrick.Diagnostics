<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Version>3.1.0.0</Version>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>netstandard1.3</TargetFramework>
    <PackageTargetFallback>portable-net45+win8+wp8+wpa81</PackageTargetFallback>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <AssemblyVersion>$(Version)</AssemblyVersion>
  </PropertyGroup>

  <PropertyGroup>
    <PackageId>HellBrick.Diagnostics</PackageId>
    <PackageVersion>$(Version)</PackageVersion>
    <Authors>HellBrick</Authors>
    <PackageProjectUrl>https://github.com/HellBrick/HellBrick.Diagnostics</PackageProjectUrl>
    <RepositoryUrl>https://github.com/HellBrick/HellBrick.Diagnostics</RepositoryUrl>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <Description>Diagnostics</Description>
    <PackageReleaseNotes>
      v3.1.0:
      - Removed the unused references analyzer (it has never worked properly anyway)
      - Fixed the generated Equals() to use a compact type name
      - Fixed the unused parameter code fix to add the type arguments if they can no longer be inferred after removing the redundant argument
      - Updated GetHashCode() generator to respect var/int code style preference

      v3.0.2:
      - Fixed a false positive reported by the unused parameter analyzer for an interface method declaration that has a parameter with a default value

      v3.0.1:
      - Fixed unused parameter analyzer to examine base calls and expression bodies properly
      - Fixed unused parameter analyzer not to suggest removing `this` parameter from extension methods
      - Fixed unused member analyzer to recognize `nameof( Method )` references

      v3.0.0:
      - Added an analyzer that forces immutable structs to have readonly modifier
      - Struct equatability analyzer has been changed to ignore structs that don't have a readonly modifier
      - Fields of non-readonly structs are no longer enforced to be readonly
      - Struct equatability diagnostics have new shared ID that allows suppressing them all with a single #pragma
      - Extended ConfigureAwait() analyzer to support arbitrary awaitable types

      v2.0.0:
      - Migrated to Roslyn 2.0
      - Updated analyzers and code fixes to respect C# 7.1

      v1.7.1:
      - fixed an exception caused by the Roslyn type resolve bug

      v1.7.0:
      - an analyzer that detects struct null comparison

      v1.6.0:
      - an analyzer that detects unused method parameters

      v1.5.1:
      - equality and mutability warnings are no longer reported for the struct enumerators
      - internal members are no longer considered unused if assembly has [InternalsVisibleTo] attribute
      - private members referenced from other partial class definitions are no longer considered unused
      - all analyzers use default heuristics to skip generated files

      v1.5.0:
      - an analyzer that detects unused class members (private and internal only)

      v1.4.5:
      - disabled formatting analyzer until it can be re-implemented properly

      v1.4.4:
      - suppressed another format of auto-generated comments

      v1.4.3:
      - changed diagnsotic IDs to provide compatibility with VS 2015 update 1

      v1.4.2:
      - an attempt to fix the FormattingAnalyzer warning issued on VS loading it from a nuget package

      v1.4.1:
      - merged in the analyzer that enforces ConfigureAwait()
      - fixed a bunch of bugs

      v1.4.0:
      - an analyzer that enforces explicit access modifiers
      - an analyzer that enforces immutability and equatability on structs
      - all analyzers ignore auto-generated code

      v1.3.0:
      - an analyzer that enforces the proper code formatting
      - a refactoring to convert one-line properties to expression-bodied properties

      v1.2.1:
      - fixed Nuget package installation issues
      - readonly modifier can now be enforced on fields of primitive types
      - var can be converted to explicit type inside the using declaration block
      - var can no longer be converted if it's generic type with anonymous arguments
      - conversion to expression-bodied member is no longer suggested for the methods that can't be converted
      - the reference is no longer considered unused if a method that returns a type declared in it is invoked

      v1.2.0:
      - a refactoring to convert String.Format() call to an interpolated string
      - a refactoring to convert var to explicit type name and back

      v1.1.0:
      - unused project references are reported to the error/information list

      v1.0.2:
      - upgraded to VS 2015 RTM

      v1.0.1:
      - readonly modifier is no longer enforced on value type fields (to avoid SpinLock-like issues)

      v1.0.0:
      - enforce readonly modifier on fields
      - convert one-line methods to expression-bodied methods
    </PackageReleaseNotes>
    <PackageTags></PackageTags>
    <NoPackageAnalysis>true</NoPackageAnalysis>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="2.6.1" PrivateAssets="all" />
    <PackageReference Update="NETStandard.Library" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <None Update="tools\*.ps1" CopyToOutputDirectory="Always" Pack="true" PackagePath="" />
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
  </ItemGroup>
</Project>